---
title: "O mistério do objeto de Ruby escondido Singleton Class"
author: "João Moura"
date: "2024-08-12"
categories: [code, ruby]
image: "ruby_cave.jpeg"
---

Oi, espero que esteja pronto, porque agora iremos tentar entender o que é esse objeto "escondido" por todos os lugares quando programamos em Ruby.

Se você é um programador curioso, já sabe que Ruby é uma linguagem que utiliza o paradigma de Orientação à Objetos, mais que isso, em Ruby tudo é objeto, tudo mesmo. Quando definimos uma classe `House`, por exemplo, essa classe também é um objeto, uma instância de `Class`, podemos perceber isso com o trecho de código abaixo, onde chamamos o método `.class` que retorna a classe de um objeto.

```ruby
class House; end

# House é uma instância da classe `Class`
House.class  # => Class
```

Isso pode ser diferente das coisas que você já viu antes e funciona de forma diferente de como eu acreditava, mas como essa característica da linguagem me impactava como programador? Eu não sabia, então procurei entender mais sobre esse comportamento, até que encontrei a chamada Singleton Class, também encontrei referências que chamam de Eigenclass ou Classe anônima. Independente de como chamamos, essa classe "escondida" é responsável por termos em Ruby os chamados métodos de classe, como o desse trecho abaixo.

```ruby
class House
    def self.open
        puts "...Opened"
    end
end

House.open  # => ...Opened
```

Acredito que não há nada diferente nesse código do que estamos acostumados escrever como programador Ruby, mas o que novidade para mim é saber que a sintáxe `def self.open` é a responsável por acessar a Singleton Class da classe `House`. Pode ser que começamos a ficar um pouco confusos. Resumindo, quando criamos um objeto e utilizamos essa sintáxe `self`, criamos uma Singleton Class, que é uma classe anônima ligada apenas ao objeto que a criou.

Quando inserimos o trecho `def self.open`, na verdade estamos criando uma Singleton class ligada à classe `House` (que é uma instância de Class, ou seja, também é um objeto) e definindo o método `open` nela, quando chamamos `House.open`, estamos chamando o método da Singleton Class que foi criada.
Talvez fique mais fácil de entender se você imaginar que, métodos de classe não existem, na verdade, eles são a sintáxe que utilizamos para acessar os métodos da Singleton Class de um objeto.
Fica mais intuitivo entender o nome dado quando sabemos que, quando executamos `House.open` pela segunda vez, não é criada uma nova Singleton Class, apenas é executado o método definido na instância criada anteriormente, seguindo o Singleton Pattern.

```ruby
class House
    def self.open
        puts "...Opened"
    end
end

# Não cria uma nova Singleton Class, apenas adiciona um novo método na instância existente
def House.close
    puts "...Closed"
end

House.open   # => ...Opened
House.close  # => ...Closed
```

Acredito que nesse momento conseguimos compreender o que é esse objeto chamado Singleton Class e como utilizamos, mas ainda não discutimos sobre como ele nos impacta na vida real, pois faremos isso agora.
Em conversa com alguns colegas, foi citado que um possível uso para essa característica da linguagem seria sobreescrever métodos de objetos para auxiliar alguns testes. No exemplo a seguir, utilizamos a Singleton Class de um objeto para sobreescrever um método para auxiliar o teste de um trecho código.

```ruby
context "Error to close the house" do
    # Método chamado dentro de self.close
    def House.close_principal_door
        raise EspecificException, "Error to close the principal door"
    end

    expect(House.close).to raise_error(EspecificException)
end
```

Particularmente, saber dessa característica de Ruby, me fez entender mais claramente um bug que criei ao desenvolver um comportamento, vou tentar apenas ilustrar o problema ocorrido em um contexto mais simples no trecho abaixo.

```ruby
class Book
    def self.gift_a_friend(friend, book)
        @fried = friend
        @book = book

        send_now(book) unless friend_has_this_book?
    end

    private

    def self.friend_has_this_book?
        @friend_has_this_book ||= @friend.books.include? @book
    end
end

Book.gift_a_friend(friend1, book)  # => Comportamento correto
Book.gift_a_friend(friend2, book)  # => Comportamento errado
```

O problema é que, na segunda vez em que o método `.friend_has_this_book` for chamado, ele não vai executar `@friend.books.include? @book` pois o valor `@friend_has_this_book` já foi preenchido na primeira vez em que o código foi executado.

Eu gostaria de ter entendido bem antes esse conceito da linguagem, mas é um ótimo ponto de partida pra quem quer conhecer mais profundamente a linguagem Ruby e suas características, com certeza esses entendimentos irão evitar a os erros e ajudá-lo na análise dos problemas que você enfrentará como programador.
Espero que tenha gostado, até a próxima.
